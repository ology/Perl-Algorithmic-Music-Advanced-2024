=head1 Advanced Algorithmic Music with Perl

G<https://ology.net/images/perl-gene.jpg> L<Gene Boggs|https://github.com/ology>

=begin html

<audio controls><source type="audio/mp3" src="audio/Eno-2_2.mp3"></audio>
<br>
<span style="font-size: medium;"><a href="http://en.wikipedia.org/wiki/Brian+Eno">Brian Eno</a> - excerpt from "Music For Airports"</span>

=end html

L<TPRC 2024|https://tprc.us/tprc-2024-las/> &#x2022; Las Vegas

=begin note

If you want to follow along or reread what just happened, these slides are live at the link on the bottom of the pages.

=end note

=head1 What this *is* about

=over

=item *

Writing MIDI files

=item *

High-level, object-oriented score construction ("Audio LEGOs")

=item *

Good ol' procedural algorithms

=back

=begin note

...

=end note

=head1 What this is *not* about

=over

=item *

Song or audio I<analysis>

=item *

I<Real-time> audio or MIDI processing

=item *

I<Low-level> MIDI events, like note_on, note_off, or sysex messages

=item *

Artificial intelligence techniques

=item *

Kittens!

=back

=begin note

...

=end note

=head1 Sorry!

G<https://placekitten.com/500/500>

=begin note

...

=end note

=head1 Fundamental Questions

=over

=item *

How do you construct a rhythm?

=item *

How do you generate pleasing harmony?

=item *

How do you make a melody?

=item *

How do you structure a tune?

=back

=begin note

These are questions to answer if we want to follow traditional theory.

But if we don't care about traditions, then anything goes. And MIDI is probably not your thing.

For instance, the idea of phrase development itself is controversial. E.g. Brian Eno, Primus guitar solos.

=end note

=head1 Techniques 1 of 2

Musical Grammars

=over

=item *

Sequences created with a set of rules that determine rhythms, notes, or phrases

=back

Constraints

=over

=item *

A solver searches for solutions, where variables are bound without violating any constraints

=back

Randomness

=over

=item *

Random sequences can be created by choosing from a pool of possibilities

=back

=head1 Techniques 2 of 2

Probability

=over

=item *

Change the chances of rhythms, notes, chords, or phrases of occuring

=back

Stochastic processes

=over

=item *

Described by a probability distributions

=back

Evolutionary methods

=over

=item *

Based on genetic algorithms using mutation and natural selection

=back

=head1 Algorithm 1 of 2

=begin pre

use MIDI::Util qw(setup_score);
use Music::Duration::Partition ();
use Music::Scales qw(get_scale_MIDI);

my $score = setup_score();

my $mdp = Music::Duration::Partition->new(
    size    => 8, # 2 measures in 4/4
    pool    => [qw(hn dqn qn en)],
    verbose => 1,
);

my @pitches = get_scale_MIDI('C', 4, 'major');

=end pre

=begin note

...

=end note

=head1 Algorithm 2 of 2

=begin pre

my @motifs = $mdp->motifs(4);

for my $motif (@motifs) {
    my @notes;

    for my $i (@$motif) {
        push @notes, $pitches[ int rand @pitches ]; # select pitches!
    }

    $mdp->add_to_score($score, $motif, \@notes);
}

$score->write_score('masterpiece.mid');

=end pre

=begin note

...

=end note

=head1 Audio Example 1

=begin html

<p></p>
<audio controls><source type="audio/mp3" src="audio/example-1.mp3"></audio>

=end html

=begin pre

> timidity -c timidity.cfg -A10a code/example-1.pl.mid -Ow -o - \
  | ffmpeg -i - -acodec libmp3lame -ab 64k audio/example-1.mp3

=end pre

=begin note

...

=end note

=head1 Groove-Tool

=over

=item *

Generate combinatorial rhythmic patterns

=item *

Produce a randomized, figured bass line

=item *

morbo groovetool.pl  # L<http://127.0.0.1:3000>

=back

=begin note

...

=end note

=head1 Figured Bass Part 1 of 2

&#x2022; B<Phrase generator for rhythmic motifs>

=begin pre

my $phrase = Music::Duration::Partition->new(
  size    => 3,                   # Number of beats to render
  pool    => [qw(hn dqn qn en)],
  weights => [   1, 1,  2, 2  ],  # Optional
  groups  => [   1, 1,  1, 2  ],  # Optional
);

my @motifs = $phrase->motifs(2);

=end pre

=begin note

...

=end note

=head1 Figured Bass Part 2 of 2

=begin pre

my @pitches = get_scale_MIDI($note, $octave, $scale);

my $voice = Music::VoiceGen->new(
  pitches   => \@pitches,
  intervals => [qw/-4 -3 -2 2 3 4/],  # Allowed interval jumps
);

# main phrase voices
my @voices1 = map { $voice->rand } $motifs[0]->@*;

# ... more code ...

my @voices2 = map { $voice->rand } $motifs[1]->@*;

=end pre

=begin note

Music::VoiceGen module by Jeremy Mates (AKA thrig) - I know you're out there!

=end note

=head1 Links

This Slideshow is
L<on GitHub|https://github.com/ology/Perl-Algorithmic-Music-Advanced-2024>
(and L<made with S5|https://metacpan.org/dist/Pod-S5>)

L<Perl Algorithmic Composition Tutorial|https://github.com/ology/MIDI-Perl-HOWTO/wiki>

The L<#perl-music|irc://irc.perl.org:6667/#perl-music> channel on irc.perl.org

The L<Groove-Tool|https://github.com/ology/Groove-Tool>,
L<Rock-Tool|https://github.com/ology/Rock-Tool> and
L<Jazz-Tool|https://github.com/ology/Jazz-Tool> on GitHub

=cut
